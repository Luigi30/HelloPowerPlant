#pragma once#include <vector>#include ":3D:3DTypes.h"#include "ShapeHelper.h"#include "PixMapDrawing.h"#define Dereference(X) (*X)typedef enum fillmode_t {	FILL_WIREFRAME,	FILL_SOLID} FillMode;std::vector<Point3D> SortByY(std::vector<Point3D> list);void BresenhamBottomFill(PixMapDrawing drawHelper, Triangle tri, UInt8 shade);void BresenhamTopFill(PixMapDrawing drawHelper, Triangle tri, UInt8 shade);class Shape3D {	std::vector<Triangle> triangleList;		Orientation orientation;	public:	Shape3D(){	}		int GetTriangleCount() { return triangleList.size(); }		void AddTriangle(Triangle t);	void AddTriangle(Point3D p1, Point3D p2, Point3D p3);		Orientation GetOrientation() { return orientation; }	void SetOrientation(Orientation o) { orientation = o; }		float GetRotationX() { return orientation.rotation.x; }	float GetRotationY() { return orientation.rotation.y; }	float GetRotationZ() { return orientation.rotation.z; }	void SetRotationX(float deg) { orientation.rotation.x = deg; }	void SetRotationY(float deg) { orientation.rotation.y = deg; }	void SetRotationZ(float deg) { orientation.rotation.z = deg; }		void Draw(LGWorld *gWorld, Orientation viewOrientation);	void DrawTriangle(PixMapDrawing drawHelper, Orientation viewOrientation, int index, FillMode fillMode);};Vector3f MatrixVectorProduct(Matrix44, Vector3f);