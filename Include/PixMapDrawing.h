//Routines for drawing on a PixMap.#ifndef PIXMAPDRAWING_H#define PIXMAPDRAWING_H#pragma once#include <cstdlib>#include <cstring>#include <map>#include <vector>#include <algorithm>#include <limits>#include ":3D:3DTypes.h"typedef enum trangle_edge_t {	EDGE_NONE,	EDGE_HORIZONTAL,	EDGE_VERTICAL} TriangleEdge;#define VIEWPORT_X 512#define VIEWPORT_Y 384class PixMapDrawing {	PixMapHandle hndl_PixMap;	float *zBuffer;	int zBufferLength;		public:	~PixMapDrawing() {		if(zBuffer != NULL) std::free(zBuffer);	}		void SetPixMapHandle(PixMapHandle handle){ hndl_PixMap = handle; }	PixMapHandle GetPixMapHandle() { return hndl_PixMap; }		PixMap *GetPixMapPtr() { return (*hndl_PixMap); }		void BresenhamBottomFill(Triangle tri, UInt8 shade);	void BresenhamTopFill(Triangle tri, UInt8 shade);		void Bresenham3D(Ptr pixels, std::map<int, BresenhamPoints3D> *edges, Point3D p1, Point3D p2, UInt8 color, TriangleEdge saveEdges = EDGE_NONE);		void CreateZBuffer() {		zBuffer = (float *)std::malloc((VIEWPORT_X * VIEWPORT_Y) * sizeof(float));		zBufferLength = (VIEWPORT_X * VIEWPORT_Y) * sizeof(float);		Assert_(zBuffer != NULL);	}		asm void ResetZBuffer();};#endif