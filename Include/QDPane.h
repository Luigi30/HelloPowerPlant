#ifndef QDPANE_H#define QDPANE_H#pragma once#include <LPane.h>#include <UGWorld.h>#include <vector>#include "Shapes.h"#include ":3D:3DTypes.h"#include ":3D:Shape3D.h"class QDPane : public LPane, public LPeriodical {	LGWorld *world;	std::vector<Shape3D> shapeList;	Orientation _viewOrientation;	public:	enum { class_ID = 'qdPn' };		QDPane();	QDPane(const SPaneInfo &inPageInfo);	QDPane(const QDPane &inOriginal);	QDPane(LStream *inStream);	virtual ~QDPane();	virtual void SpendTime(const EventRecord &inMacEvent);		void SetupGWorld();	void DrawShapeList();		Point GetViewOffset();	void SetViewOffset(Point offset);		Matrix44 GetViewMatrix();		void AdjustViewCenterX(int offset);	void AdjustViewCenterY(int offset);	void AdjustViewCenterZ(int offset);		protected:	virtual void DrawSelf();	virtual void ClickSelf(const SMouseDownEvent &inMouseDown);	virtual void AdjustCursorSelf(Point inPortPt, const EventRecord &inMacEvent);};#endif