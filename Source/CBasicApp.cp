// ===========================================================================//	CBasicApp.cp 				©1994-2001 Metrowerks Inc. All rights reserved.// ===========================================================================//	This file contains the starter code for a basic PowerPlant project#include "CBasicApp.h"#include <LGrowZone.h>#include <PP_Messages.h>#include <PP_Resources.h>#include <UDrawingState.h>#include <UMemoryMgr.h>#include <URegistrar.h>#include <LWindow.h>#include <LCaption.h>// ---------------------------------------------------------------------------//	Constant declarationsconst ResIDT	rPPob_SampleWindow			= 128;const ResIDT	rRidL_SampleWindow			= rPPob_SampleWindow;const PaneIDT	kQuitBtn	=	0;const PaneIDT	kUpBtn		=	3;const PaneIDT	kLeftBtn	=	4;const PaneIDT	kRightBtn	=	5;const PaneIDT	kDownBtn	=	6;LWindow *qdWindow;QDWindow *cast_qdWindow;// ===========================================================================//	¥ main// ===========================================================================int main(){									// Set Debugging options	SetDebugThrow_(debugAction_Alert);	SetDebugSignal_(debugAction_Alert);		// Initialize Memory Manager. Parameter is the number of		// master pointer blocks to allocate	InitializeHeap(3);			// Initialize standard Toolbox managers	UQDGlobals::InitializeToolbox();			// Install a GrowZone to catch low-memory situations		new LGrowZone(20000);		// Create the application object and run	CBasicApp	theApp;	theApp.Run();		return 0;}// ---------------------------------------------------------------------------//	¥ CBasicApp										[public]// ---------------------------------------------------------------------------//	Application object constructorCBasicApp::CBasicApp(){	RegisterClasses();}// ---------------------------------------------------------------------------//	¥ ~CBasicApp									[public, virtual]// ---------------------------------------------------------------------------//	Application object destructorCBasicApp::~CBasicApp(){	// Nothing}// ---------------------------------------------------------------------------//	¥ StartUp										[protected, virtual]// ---------------------------------------------------------------------------//	Perform an action in response to the Open Application AppleEvent.//	Here, issue the New command to open a window.voidCBasicApp::StartUp(){	//Do some initialization.	ObeyCommand(cmd_New, nil);}// ---------------------------------------------------------------------------//	¥ ObeyCommand									[public, virtual]// ---------------------------------------------------------------------------//	Respond to Commands. Returns true if the Command was handled, false if not.BooleanCBasicApp::ObeyCommand(	CommandT	inCommand,	void*		ioParam){	Boolean		cmdHandled = true;	// Assume we'll handle the command	switch (inCommand) {		case cmd_New: {			LWindow* theWindow = LWindow::CreateWindow(rPPob_SampleWindow, this);			ThrowIfNil_(theWindow);						//Make the application listen to all controls.			LStdButton *quitBtn;			quitBtn = dynamic_cast<LStdButton *>(theWindow->FindPaneByID(kQuitBtn));			quitBtn->AddListener(this);						LStdButton *dirBtn;			dirBtn = dynamic_cast<LStdButton *>(theWindow->FindPaneByID(kUpBtn));			dirBtn->AddListener(this);			dirBtn = dynamic_cast<LStdButton *>(theWindow->FindPaneByID(kLeftBtn));			dirBtn->AddListener(this);			dirBtn = dynamic_cast<LStdButton *>(theWindow->FindPaneByID(kRightBtn));			dirBtn->AddListener(this);			dirBtn = dynamic_cast<LStdButton *>(theWindow->FindPaneByID(kDownBtn));			dirBtn->AddListener(this);			theWindow->Show();						//Initialize the GameWorld.			//Make (0,0) the center of the viewport.			GameWorld::Instance()->GetViewOrientationPtr()->translation.x = 320;			GameWorld::Instance()->GetViewOrientationPtr()->translation.y = 240;						Shape3D shape;			shape.AddTriangle(Point3D(-0.5f,0.5f,0.5f), Point3D(0.5f,0.5f,0.5f), Point3D(0.5f,0.5f,-0.5f));			shape.AddTriangle(Point3D(-0.5f,0.5f,0.5f), Point3D(0.5f,0.5f,-0.5f), Point3D(-0.5f,0.5f,-0.5f));						/*			shape.AddTriangle(Point3D(-0.5f,0.5f,0.5f), Point3D(-0.5f,-0.5f,0.5f), Point3D(0.5f,-0.5f,0.5f));			shape.AddTriangle(Point3D(-0.5f,0.5f,0.5f), Point3D(0.5f,-0.5f,0.5f), Point3D(0.5f,0.5f,0.5f));			shape.AddTriangle(Point3D(-0.5f,0.5f,0.5f), Point3D(-0.5f,-0.5f,0.5f), Point3D(-0.5f,-0.5f,-0.5f));			shape.AddTriangle(Point3D(-0.5f,0.5f,0.5f), Point3D(-0.5f,-0.5f,-0.5f), Point3D(-0.5f,0.5f,-0.5f));						shape.AddTriangle(Point3D(0.5f,-0.5f,-0.5f), Point3D(-0.5f,-0.5f,-0.5f), Point3D(-0.5f,-0.5f,0.5f));			shape.AddTriangle(Point3D(0.5f,-0.5f,-0.5f), Point3D(-0.5f,-0.5f,0.5f), Point3D(0.5f,-0.5f,0.5f));			shape.AddTriangle(Point3D(0.5f,-0.5f,-0.5f), Point3D(-0.5f,-0.5f,-0.5f), Point3D(-0.5f,0.5f,-0.5f));			shape.AddTriangle(Point3D(0.5f,-0.5f,-0.5f), Point3D(-0.5f,0.5f,-0.5f), Point3D(0.5f,0.5f,-0.5f));						shape.AddTriangle(Point3D(0.5f,-0.5f,-0.5f), Point3D(0.5f,0.5f,-0.5f), Point3D(0.5f,0.5f,0.5f));			shape.AddTriangle(Point3D(0.5f,-0.5f,-0.5f), Point3D(0.5f,0.5f,0.5f), Point3D(0.5f,-0.5f,0.5f));			*/						Orientation o;			o.rotation = Vector3f(180, 0, 0);			o.scale = Vector3f(100,100,100);			shape.SetOrientation(o);						GameWorld::Instance()->GetShapeListPtr()->push_back(shape);						//Show the QuickDraw window now.			qdWindow = QDWindow::CreateWindow(rPPob_QDWindow, this);			cast_qdWindow = dynamic_cast<QDWindow *>(qdWindow);			qdWindow->Show();						QDPane *pane;			LPane *p = qdWindow->FindPaneByID(1000);						pane = dynamic_cast<QDPane *>(p);			Assert_(pane != NULL);			cast_qdWindow->SetQDPanePtr(pane);						//Enable our rendering behavior.			pane->StartRepeating();						//qdWindow.Draw(nil);			break;		}		default: {			cmdHandled = LApplication::ObeyCommand(inCommand, ioParam);			break;		}	}		return cmdHandled;}// ---------------------------------------------------------------------------//	¥ FindCommandStatus								[public, virtual]// ---------------------------------------------------------------------------//	Determine the status of a Command for the purposes of menu updating.voidCBasicApp::FindCommandStatus(	CommandT	inCommand,	Boolean&	outEnabled,	Boolean&	outUsesMark,	UInt16&		outMark,	Str255		outName){	switch (inCommand) {		case cmd_New: {			outEnabled = true;			break;		}		default: {			LApplication::FindCommandStatus(inCommand, outEnabled,											outUsesMark, outMark, outName);			break;		}	}}// ---------------------------------------------------------------------------//	¥ RegisterClasses								[protected]// ---------------------------------------------------------------------------//	To reduce clutter within the Application object's constructor, class//	registrations appear here in this seperate function for ease of use.voidCBasicApp::RegisterClasses(){	RegisterClass_(LWindow);	RegisterClass_(LCaption);	RegisterClass_(LStdButton);		RegisterClass_(QDPane);}void CBasicApp::ListenToMessage(MessageT inMessage, void *ioParam) {#pragma unused(ioParam)	if(inMessage == 1000){		SendAEQuit();	}		if(inMessage == 2){		cast_qdWindow->GetQDPanePtr()->AdjustViewCenterY(-20);	}	if(inMessage == 4){		cast_qdWindow->GetQDPanePtr()->AdjustViewCenterX(20);	}	if(inMessage == 6){		cast_qdWindow->GetQDPanePtr()->AdjustViewCenterX(-20);	}	if(inMessage == 8){		cast_qdWindow->GetQDPanePtr()->AdjustViewCenterY(20);	}}