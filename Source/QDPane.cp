#include "QDPane.h"#include "ShapeHelper.h"void QDPane::SetupGWorld() {	CTabHandle colorTable = ::GetCTable(40); //grab a 256-color grayscale CLUT	Rect frame;	CalcLocalFrameRect(frame);	world = new LGWorld(frame, 8); //8-bit depth	PixMapHandle h = ::GetGWorldPixMap(world->GetMacGWorld());	(*h)->pmTable = colorTable;}/* Chapter 6 of the PowerPlant book */QDPane::QDPane() {	SetupGWorld();};QDPane::QDPane(const SPaneInfo &inPaneInfo) : LPane(inPaneInfo) {	SetupGWorld();};QDPane::QDPane(const QDPane &inOriginal) : LPane(inOriginal) {	SetupGWorld();};QDPane::QDPane(LStream *inStream) : LPane(inStream) {	SetupGWorld();};void QDPane::DrawShapeList(){	Rect frame;	CalcLocalFrameRect(frame);	Point center = ShapeHelper::FindCentroid(frame);		std::vector<Shape3D> *shapeList = GameWorld::Instance()->GetShapeListPtr();	for(int i=0;i<shapeList->size();i++){		(*shapeList)[i].Draw(world, *(GameWorld::Instance()->GetViewOrientationPtr()));	}}//Called automatically by the Pane's Draw() functionvoid QDPane::DrawSelf(){	Rect frame;	CalcLocalFrameRect(frame);	Point center = ShapeHelper::FindCentroid(frame);		//BeginDrawing tells it to use the GWorld instead of the pane.	world->BeginDrawing();		//Initialize the GWorld back to a blank canvas	::EraseRect(&frame);		//Draw our shapes	DrawShapeList();		//Draw that rectangle outline	PenState penState;	GetPenState(&penState);		::FrameRect(&frame);	::PenSize(4, 4);	::MoveTo(center.h, center.v);	::LineTo(center.h, center.v);		SetPenState(&penState);		StTextState textState;	StTextState::Normalize();	TextFont(kFontIDGeneva);	TextSize(10);	MoveTo(10, frame.bottom-20);	DrawString("\pLuigi Thirty's Dinky Mac Software Renderer");	MoveTo(10, frame.bottom-8);	DrawString("\pTwitter: @LuigiThirty");	//EndDrawing says we're done with the GWorld.	world->EndDrawing();	//Blit the GWorld's grafport to the screen.	world->CopyImage(GetMacPort(), frame, srcCopy);}//Handler for if this panel is clicked.void QDPane::ClickSelf(const SMouseDownEvent &inMouseDown){}//Handler that can change the cursor if it's over this Pane.void QDPane::AdjustCursorSelf(Point inPortPt, const EventRecord &inMacEvent) {}//Destructor. Leave empty unless we need to destrow an object.QDPane::~QDPane() {	delete world;}void QDPane::SpendTime(const EventRecord &inMacEvent){	GameWorld::Instance()->GetViewOrientationPtr()->rotation.x++;	GameWorld::Instance()->GetViewOrientationPtr()->rotation.y++;	Draw(nil);}void QDPane::AdjustViewCenterX(int offset){	GameWorld::Instance()->GetViewOrientationPtr()->translation.x += offset;}void QDPane::AdjustViewCenterY(int offset){	GameWorld::Instance()->GetViewOrientationPtr()->translation.y += offset;}void QDPane::AdjustViewCenterZ(int offset){	GameWorld::Instance()->GetViewOrientationPtr()->translation.z += offset;}