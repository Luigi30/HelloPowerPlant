#include ":3D:Shape3D.h"void Shape3D::AddTriangle(Triangle t){	if(t.GetWinding() == WINDING_CCW) {		Assert_(false);	}	triangleList.push_back(t);}void Shape3D::AddTriangle(Point3D p1, Point3D p2, Point3D p3) {	if(Triangle(p1, p2, p3).GetWinding() == WINDING_CCW) {		//Assert_(false);	}	triangleList.push_back(Triangle(p1, p2, p3));}	void Shape3D::Draw(Renderer *renderer){	::PenSize(1,1); //reset graphics pen		Assert_(GetTriangleCount() > 0);		for(int i=0;i<triangleList.size();i++){		renderer->DrawTriangle(orientation, triangleList[i]);	}}void Shape3D::LoadModel(char *filename){	std::vector<Point3D> vertexList;	std::ifstream modelFile;	modelFile.open(filename, std::ios::in);		Assert_(modelFile.is_open());		//Read one line at a time into an array of points.	//std::string line;	bool isVertex = false;	std::string line_V("v");		do	{		//std::getline(modelFile, line);				std::string lineType;		modelFile >> lineType;		if(lineType.compare(line_V) == 0)		{			isVertex = true;					float v1, v2, v3;			modelFile >> v1;			modelFile >> v2;			modelFile >> v3;			vertexList.push_back(Point3D(v1, v2, v3));		}		else		{			isVertex = false;		}	}	while(isVertex);		//Read the rest of the file, processing faces as we go.	const std::string line_F("f");	const std::string delimiter("/");	do	{		std::string lineType;		modelFile >> lineType;				if(lineType.compare(line_F) == 0)		{			//Should be three entries separated by whitespace.			//An entry is in format 1/2/3			//1 = v, 2 = vt, 3 = vn						std::string entry1, entry2, entry3;			std::string token1, token2, token3;						modelFile >> entry1;			modelFile >> entry2;			modelFile >> entry3;						int num1, num2, num3;						num1 = std::atoi(entry1.substr(0, entry1.find(delimiter)).c_str());			num2 = std::atoi(entry2.substr(0, entry2.find(delimiter)).c_str());			num3 = std::atoi(entry3.substr(0, entry3.find(delimiter)).c_str());						//OBJ vertex entries are 1-indexed so subtract 1 from the result.			AddTriangle(vertexList[num1-1], vertexList[num2-1], vertexList[num3-1]);		}			} while(!modelFile.eof());	}