#pragma once#include "Shapes.h"#include "ShapeHelper.h"void Shape2D::Draw(Point offset) {	PenState penState;	GetPenState(&penState);		PolyHandle shape = ::OpenPoly();		//Make sure there are vertices to draw.	Assert_(GetVertexCount() > 0);		//Rotate the vertices in a local buffer.	std::vector<Point> rotatedVertices;	for(int i=0;i<_vertices.size(); i++){		rotatedVertices.push_back(ShapeHelper::RotatePointAroundOrigin(_vertices[i], rotationDegrees));	}		//Move the pen to vertex 0's position.	::MoveTo(rotatedVertices[0].h, rotatedVertices[0].v);	//Collect line draw functions.	for(int i=0; i<_vertices.size(); i++){		::LineTo(rotatedVertices[i].h, rotatedVertices[i].v);	}	//Wrap back to vertex 0 to make a complete circuit of the polygon.	::LineTo(rotatedVertices[0].h, rotatedVertices[0].v);	//Done with this polygon.	::ClosePoly();		//Apply the offset we provided.	::OffsetPoly(shape, offset.h, offset.v);		Pattern p;	UQDGlobals::GetGrayPat(&p);	::PenPat(&p);	::PaintPoly(shape); //Draw...	::KillPoly(shape);  //...and free when complete.		//Restore the graphics pen before returning.	SetPenState(&penState);}void Shape2D::SetRotationDegrees(SInt16 degrees){	rotationDegrees = degrees;}SInt16 Shape2D::GetRotationDegrees() { return rotationDegrees; };void Shape2D::AddVertex(Point v){	_vertices.push_back(v);}void Shape2D::AddVertex(short v, short h){	Point p = { v, h };	_vertices.push_back(p);}int Shape2D::GetVertexCount() { return _vertices.size(); }